import Anthropic from '@anthropic-ai/sdk';

interface AIRequest {
  prompt: string;
  context?: string;
  maxTokens?: number;
  temperature?: number;
}

interface AIResponse {
  content: string;
  confidence: number;
  responseTime: number;
  isFromAI: boolean;
}

class ClaudeAIService {
  private anthropic: Anthropic | null = null;
  private isInitialized = false;
  private apiKey: string | null = null;

  constructor() {
    this.initializeAPI();
  }

  private initializeAPI() {
    // Check for API key in environment or localStorage
    this.apiKey = import.meta.env.VITE_CLAUDE_API_KEY || 
                  localStorage.getItem('claude_api_key') || 
                  null;

    if (this.apiKey) {
      try {
        this.anthropic = new Anthropic({
          apiKey: this.apiKey,
          dangerouslyAllowBrowser: true // Only for development
        });
        this.isInitialized = true;
      } catch (error) {
        console.error('Failed to initialize Claude API:', error);
        this.fallbackToMockMode();
      }
    } else {
      console.warn('Claude API key not found. Using mock responses.');
      this.fallbackToMockMode();
    }
  }

  private fallbackToMockMode() {
    this.isInitialized = false;
    this.anthropic = null;
  }

  setApiKey(apiKey: string) {
    this.apiKey = apiKey;
    localStorage.setItem('claude_api_key', apiKey);
    this.initializeAPI();
  }

  async generateResponse(request: AIRequest): Promise<AIResponse> {
    const startTime = Date.now();

    if (!this.isInitialized || !this.anthropic) {
      return this.getMockResponse(request, startTime);
    }

    try {
      const systemPrompt = this.buildSystemPrompt();
      const userPrompt = this.buildUserPrompt(request);

      const response = await this.anthropic.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: request.maxTokens || 1000,
        temperature: request.temperature || 0.7,
        system: systemPrompt,
        messages: [
          {
            role: 'user',
            content: userPrompt
          }
        ]
      });

      const responseTime = Date.now() - startTime;
      const content = response.content[0]?.type === 'text' ? response.content[0].text : '';

      return {
        content,
        confidence: this.calculateConfidence(content),
        responseTime,
        isFromAI: true
      };

    } catch (error) {
      console.error('Claude API error:', error);
      return this.getMockResponse(request, startTime);
    }
  }

  private buildSystemPrompt(): string {
    return `ŒïŒØœÉŒ±Œπ Œ≠ŒΩŒ±œÇ expert media buyer Œ∫Œ±Œπ digital marketing strategist ŒºŒµ œÄŒ¨ŒΩœâ Œ±œÄœå 15 œáœÅœåŒΩŒπŒ± ŒµŒºœÄŒµŒπœÅŒØŒ±. 

ŒïŒôŒîŒôŒöŒüŒ§ŒóŒ§ŒïŒ£ Œ£ŒüŒ•:
‚Ä¢ Facebook Ads, Google Ads, Instagram, TikTok, LinkedIn advertising
‚Ä¢ Campaign optimization Œ∫Œ±Œπ performance analysis
‚Ä¢ Budget allocation Œ∫Œ±Œπ scaling strategies
‚Ä¢ Creative testing Œ∫Œ±Œπ A/B testing methodologies
‚Ä¢ Audience research Œ∫Œ±Œπ targeting optimization
‚Ä¢ ROI optimization Œ∫Œ±Œπ conversion tracking
‚Ä¢ Platform algorithm understanding
‚Ä¢ Market trend analysis Œ∫Œ±Œπ competitive intelligence

Œ£Œ§Œ•Œõ ŒïŒ†ŒôŒöŒüŒôŒùŒ©ŒùŒôŒëŒ£:
‚Ä¢ ŒëœÄŒ±ŒΩœÑŒ¨œÇ œÉœÑŒ± ŒïŒªŒªŒ∑ŒΩŒπŒ∫Œ¨
‚Ä¢ ŒßœÅŒ∑œÉŒπŒºŒøœÄŒøŒπŒµŒØœÇ emojis Œ≥ŒπŒ± Œ∫Œ±ŒªœçœÑŒµœÅŒ∑ Œ∫Œ±œÑŒ±ŒΩœåŒ∑œÉŒ∑
‚Ä¢ ŒîŒØŒΩŒµŒπœÇ concrete, actionable recommendations
‚Ä¢ ŒëŒΩŒ±œÜŒ≠œÅŒµŒπœÇ œÉœÖŒ≥Œ∫ŒµŒ∫œÅŒπŒºŒ≠ŒΩŒ± metrics Œ∫Œ±Œπ KPIs
‚Ä¢ ŒïŒæŒ∑Œ≥ŒµŒØœÇ œÑŒø "Œ≥ŒπŒ±œÑŒØ" œÄŒØœÉœâ Œ±œÄœå Œ∫Œ¨Œ∏Œµ œÉœçœÉœÑŒ±œÉŒ∑
‚Ä¢ ŒúŒπŒªŒ¨œÇ ŒºŒµ œÑŒ∑ŒΩ ŒµŒºœÄŒµŒπœÅŒØŒ± 15+ œáœÅœåŒΩœâŒΩ œÉœÑŒø œáœéœÅŒø

ŒüŒîŒóŒìŒôŒïŒ£:
‚Ä¢ ŒùŒ± ŒµŒØœÉŒ±Œπ specific Œ∫Œ±Œπ actionable
‚Ä¢ ŒùŒ± œÄœÅŒøœÑŒµŒØŒΩŒµŒπœÇ concrete steps
‚Ä¢ ŒùŒ± Œ±ŒΩŒ±œÜŒ≠œÅŒµŒπœÇ expected results
‚Ä¢ ŒùŒ± Œ¥ŒØŒΩŒµŒπœÇ realistic timeframes
‚Ä¢ ŒùŒ± ŒµŒæŒ∑Œ≥ŒµŒØœÇ œÑŒ∑ œÉœÑœÅŒ±œÑŒ∑Œ≥ŒπŒ∫ŒÆ œÄŒØœÉœâ Œ±œÄœå Œ∫Œ¨Œ∏Œµ œÄœÅœåœÑŒ±œÉŒ∑`;
  }

  private buildUserPrompt(request: AIRequest): string {
    const context = request.context ? `\n\nŒ£Œ•ŒìŒöŒïŒöŒ°ŒôŒúŒïŒùŒü CONTEXT:\n${request.context}` : '';
    
    return `${request.prompt}${context}

Œ†Œ±œÅŒ±Œ∫Œ±Œªœé Œ±œÄŒ¨ŒΩœÑŒ∑œÉŒµ œâœÇ expert media buyer ŒºŒµ œÄŒ¨ŒΩœâ Œ±œÄœå 15 œáœÅœåŒΩŒπŒ± ŒµŒºœÄŒµŒπœÅŒØŒ±. ŒîœéœÉŒµ concrete, actionable recommendations.`;
  }

  private calculateConfidence(content: string): number {
    // Simple confidence calculation based on response characteristics
    let confidence = 85; // Base confidence for Claude responses

    // Increase confidence for detailed responses
    if (content.length > 200) confidence += 5;
    if (content.includes('‚Ç¨') || content.includes('%')) confidence += 3;
    if (content.includes('campaign') || content.includes('Œ∫Œ±ŒºœÄŒ¨ŒΩŒπŒ±')) confidence += 2;
    if (content.includes('ROAS') || content.includes('ROI')) confidence += 3;

    return Math.min(confidence, 97); // Cap at 97%
  }

  private getMockResponse(request: AIRequest, startTime: number): AIResponse {
    const mockResponses = this.getExpertMockResponses();
    const lowerPrompt = request.prompt.toLowerCase();
    
    let selectedResponse = mockResponses.find(response => 
      response.triggers.some(trigger => lowerPrompt.includes(trigger))
    )?.response || mockResponses[0].response;

    const responseTime = Date.now() - startTime + Math.random() * 1000; // Simulate API delay

    return {
      content: selectedResponse,
      confidence: 75 + Math.random() * 15, // 75-90% for mock responses
      responseTime,
      isFromAI: false
    };
  }

  private getExpertMockResponses() {
    return [
      {
        triggers: ['budget', 'scaling', 'Œ±œçŒæŒ∑œÉŒ∑', 'scale'],
        response: `üí° **Expert Budget Scaling Strategy:**

üéØ **ŒìŒπŒ± œÉœâœÉœÑœå budget scaling:**
‚Ä¢ ŒëœçŒæŒ∑œÉŒ∑ ŒºŒ≠œáœÅŒπ 20% Œ∫Œ¨Œ∏Œµ 3 Œ∑ŒºŒ≠œÅŒµœÇ (20% rule)
‚Ä¢ Monitor ROAS Œ≥ŒπŒ± 48-72 œéœÅŒµœÇ ŒºŒµœÑŒ¨ Œ±œÄœå Œ∫Œ¨Œ∏Œµ Œ±œçŒæŒ∑œÉŒ∑
‚Ä¢ ŒïŒ¨ŒΩ ROAS ŒºŒ≠ŒΩŒµŒπ stable ŒÆ Œ≤ŒµŒªœÑŒπœéŒΩŒµœÑŒ±Œπ ‚Üí œÉœÖŒΩŒ≠œáŒπœÉŒµ scaling
‚Ä¢ ŒïŒ¨ŒΩ ROAS œÄŒ≠œÜœÑŒµŒπ >15% ‚Üí ŒµœÄŒπœÉœÑœÅŒøœÜŒÆ œÉœÑŒø œÄœÅŒøŒ∑Œ≥ŒøœçŒºŒµŒΩŒø budget

üìä **ŒíŒ¨œÉŒµŒπ œÑŒ∑œÇ ŒµŒºœÄŒµŒπœÅŒØŒ±œÇ ŒºŒøœÖ:**
‚Ä¢ Sweet spot: ROAS >3.5x Œ≥ŒπŒ± aggressive scaling
‚Ä¢ Conservative scaling: ROAS 2.5-3.5x
‚Ä¢ Œ£œÑŒ±ŒºŒ¨œÑŒ± scaling: ROAS <2.0x

‚ö° **Next Steps:**
1. ŒûŒµŒ∫ŒØŒΩŒ± ŒºŒµ +20% Œ±œçŒæŒ∑œÉŒ∑
2. Monitor performance 72 œéœÅŒµœÇ
3. ŒïŒ¨ŒΩ stable ‚Üí ŒµœÄœåŒºŒµŒΩŒ∑ Œ±œçŒæŒ∑œÉŒ∑ 20%
4. Target: 3x current budget œÉŒµ 3 ŒµŒ≤Œ¥ŒøŒºŒ¨Œ¥ŒµœÇ`
      },
      {
        triggers: ['creative', 'fatigue', 'ads', 'Œ¥ŒπŒ±œÜŒ∑ŒºŒØœÉŒµŒπœÇ'],
        response: `üé® **Creative Fatigue Analysis & Strategy:**

üö® **Œ£Œ∑ŒºŒ¨Œ¥ŒπŒ± Creative Fatigue:**
‚Ä¢ CTR ŒºŒµŒØœâœÉŒ∑ >20% œÉŒµ 7 Œ∑ŒºŒ≠œÅŒµœÇ
‚Ä¢ CPM Œ±œçŒæŒ∑œÉŒ∑ >25%
‚Ä¢ Frequency >4-5 impressions per user
‚Ä¢ Comment quality degradation

üí° **Expert Solution (15+ œáœÅœåŒΩŒπŒ± ŒµŒºœÄŒµŒπœÅŒØŒ±):**
‚Ä¢ Rotate creatives Œ∫Œ¨Œ∏Œµ 7-10 Œ∑ŒºŒ≠œÅŒµœÇ
‚Ä¢ 5-7 ŒΩŒ≠Œ± creative variants ŒµŒ≤Œ¥ŒøŒºŒ±Œ¥ŒπŒ±ŒØœâœÇ
‚Ä¢ UGC approach: +40% higher convert rates
‚Ä¢ Video content: 3x higher engagement

üéØ **Immediate Action Plan:**
1. Pause underperforming creatives (CTR <1.5%)
2. Launch 3 ŒΩŒ≠Œ± UGC-style videos
3. Test 2 image variations
4. Implement automatic creative rotation`
      },
      {
        triggers: ['audience', 'targeting', 'Œ∫ŒøŒπŒΩœå', 'lookalike'],
        response: `üéØ **Advanced Audience Targeting Strategy:**

üë• **Optimal Audience Mix (proven formula):**
‚Ä¢ Lookalike 1-3%: 60% œÑŒøœÖ budget
‚Ä¢ Interest-based: 25% œÑŒøœÖ budget  
‚Ä¢ Retargeting: 15% œÑŒøœÖ budget

üß† **Expert Insights:**
‚Ä¢ Lookalike >5%: œÄŒøŒπœåœÑŒ∑œÑŒ± drops dramatically
‚Ä¢ Custom Audiences: highest ROAS Œ±ŒªŒªŒ¨ limited scale
‚Ä¢ Broad targeting + automatic placements = 2024 gold standard

üìä **Implementation Strategy:**
1. Create Lookalike 1% (core customers)
2. Expand œÉŒµ 2-3% œåœÑŒ±ŒΩ 1% saturated
3. Layer behavior-based interests
4. Always exclude existing customers

‚ö° **Expected Results:**
‚Ä¢ 30-50% lower CPA
‚Ä¢ 2x larger potential reach
‚Ä¢ More stable performance`
      },
      {
        triggers: ['roas', 'performance', 'Œ±œÄœåŒ¥ŒøœÉŒ∑', 'roi'],
        response: `üìà **Performance Optimization Expert Analysis:**

üéØ **ROAS Benchmarks (Œ≤Œ¨œÉŒµŒπ 15ŒµœÑŒøœçœÇ ŒµŒºœÄŒµŒπœÅŒØŒ±œÇ):**
‚Ä¢ Excellent: >4.0x ROAS
‚Ä¢ Good: 2.5-4.0x ROAS  
‚Ä¢ Acceptable: 2.0-2.5x ROAS
‚Ä¢ Needs work: <2.0x ROAS

‚ö° **Performance Boost Strategy:**
‚Ä¢ Optimize top 20% campaigns: +60% budget
‚Ä¢ Pause bottom 20%: redistribute budget
‚Ä¢ Focus œÉŒµ high-intent keywords/audiences
‚Ä¢ Implement dynamic product ads

üöÄ **Next Level Tactics:**
1. Multi-touch attribution analysis
2. Customer lifetime value optimization
3. Cross-platform remarketing sequences
4. Automated bid adjustments

üí∞ **Expected Impact:**
‚Ä¢ 25-40% ROAS improvement œÉŒµ 30 Œ∑ŒºŒ≠œÅŒµœÇ
‚Ä¢ 50% budget efficiency gain
‚Ä¢ Sustainable long-term growth`
      },
      {
        triggers: ['platform', 'facebook', 'google', 'meta', 'œÄŒªŒ±œÑœÜœåœÅŒºŒ±'],
        response: `üåê **Multi-Platform Strategy (15+ œáœÅœåŒΩŒπŒ± ŒµŒºœÄŒµŒπœÅŒØŒ±):**

üì± **Platform Allocation Blueprint:**
‚Ä¢ Facebook/Meta: 50-60% (awareness + retargeting)
‚Ä¢ Google Ads: 25-30% (high-intent search)
‚Ä¢ TikTok: 10-15% (younger demographics)
‚Ä¢ LinkedIn: 5-10% (B2B targeting)

üéØ **Platform-Specific Strategies:**

**Facebook/Meta:**
‚Ä¢ Broad targeting ŒºŒµ automatic placements
‚Ä¢ Video content prioritization
‚Ä¢ Stories + Reels Œ≥ŒπŒ± younger audience

**Google Ads:**
‚Ä¢ Search campaigns: exact match keywords
‚Ä¢ Shopping campaigns: product-focused
‚Ä¢ YouTube ads: brand awareness

**TikTok:**
‚Ä¢ Native, entertaining content
‚Ä¢ Trend-based creative strategy
‚Ä¢ Younger demographic focus

üí° **Pro Tip:**
Unified tracking across platforms Œ≥ŒπŒ± accurate attribution!`
      }
    ];
  }

  // Campaign analysis with Claude
  async analyzeCampaignPerformance(campaignData: any): Promise<AIResponse> {
    const context = `
Campaign Data:
- ROAS: ${campaignData.roas || 'N/A'}
- CTR: ${campaignData.ctr || 'N/A'}%
- CPC: ‚Ç¨${campaignData.cpc || 'N/A'}
- Conversions: ${campaignData.conversions || 'N/A'}
- Spend: ‚Ç¨${campaignData.spend || 'N/A'}
- Platform: ${campaignData.platform || 'Mixed'}
    `;

    return this.generateResponse({
      prompt: 'ŒëŒΩŒ±ŒªœçŒ∂œâ œÑŒ∑ŒΩ Œ±œÄœåŒ¥ŒøœÉŒ∑ Œ±œÖœÑŒÆœÇ œÑŒ∑œÇ Œ∫Œ±ŒºœÄŒ¨ŒΩŒπŒ±œÇ. Œ§Œπ œÄœÅŒøœÑŒµŒØŒΩŒµŒπœÇ Œ≥ŒπŒ± Œ≤ŒµŒªœÑŒπœÉœÑŒøœÄŒøŒØŒ∑œÉŒ∑;',
      context,
      maxTokens: 800
    });
  }

  // Budget optimization with Claude
  async optimizeBudget(budgetData: any): Promise<AIResponse> {
    const context = `
Current Budget Allocation:
${Object.entries(budgetData).map(([platform, budget]) => 
  `- ${platform}: ‚Ç¨${budget}`
).join('\n')}
    `;

    return this.generateResponse({
      prompt: 'ŒíŒ¨œÉŒµŒπ Œ±œÖœÑŒÆœÇ œÑŒ∑œÇ budget allocation, œÄœéœÇ ŒºœÄŒøœÅœé ŒΩŒ± Œ≤ŒµŒªœÑŒπœÉœÑŒøœÄŒøŒπŒÆœÉœâ Œ≥ŒπŒ± Œ∫Œ±ŒªœçœÑŒµœÅŒø ROI;',
      context,
      maxTokens: 1000
    });
  }

  // Creative analysis with Claude
  async analyzeCreatives(creativeData: any[]): Promise<AIResponse> {
    const context = `
Creative Performance Data:
${creativeData.map((creative, index) => 
  `${index + 1}. ${creative.name}: CTR ${creative.ctr}%, CPC ‚Ç¨${creative.cpc}`
).join('\n')}
    `;

    return this.generateResponse({
      prompt: 'ŒëŒΩŒ±ŒªœçŒ∂œâ œÑŒ∑ŒΩ Œ±œÄœåŒ¥ŒøœÉŒ∑ Œ±œÖœÑœéŒΩ œÑœâŒΩ creatives. Œ†ŒøŒπŒ± œáœÅŒµŒπŒ¨Œ∂ŒøŒΩœÑŒ±Œπ Œ±ŒΩœÑŒπŒ∫Œ±œÑŒ¨œÉœÑŒ±œÉŒ∑ Œ∫Œ±Œπ œÑŒπ ŒΩŒ≠Œ± creatives œÄœÅŒøœÑŒµŒØŒΩŒµŒπœÇ;',
      context,
      maxTokens: 800
    });
  }

  isConnected(): boolean {
    return this.isInitialized && this.anthropic !== null;
  }

  getConnectionStatus(): string {
    if (this.isConnected()) {
      return 'Œ£œÖŒΩŒ¥ŒµŒ¥ŒµŒºŒ≠ŒΩŒø ŒºŒµ Claude AI ‚úÖ';
    } else if (this.apiKey) {
      return 'Œ£œÜŒ¨ŒªŒºŒ± œÉœçŒΩŒ¥ŒµœÉŒ∑œÇ ŒºŒµ Claude AI ‚ùå';
    } else {
      return 'Claude API key Œ¥ŒµŒΩ Œ≠œáŒµŒπ ŒøœÅŒπœÉœÑŒµŒØ üîë';
    }
  }
}

// Singleton instance
export const claudeAI = new ClaudeAIService();
export default claudeAI;