# Kubernetes Deployment for Ads Pro Platform - Option D Implementation
# Base deployment configuration for multiple environments

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ads-pro-platform
  labels:
    app: ads-pro-platform
    component: frontend
    version: "1.0.0"
spec:
  replicas: 3
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ads-pro-platform
      component: frontend
  template:
    metadata:
      labels:
        app: ads-pro-platform
        component: frontend
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ads-pro-platform
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: ads-pro-platform
        image: ghcr.io/ads-pro-platform/ui:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8080"
        - name: VITE_APP_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['version']
        envFrom:
        - configMapRef:
            name: ads-pro-platform-config
        - secretRef:
            name: ads-pro-platform-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ads-pro-platform
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: ads-pro-platform-service
  labels:
    app: ads-pro-platform
    component: frontend
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: ads-pro-platform
    component: frontend

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ads-pro-platform
  labels:
    app: ads-pro-platform
    component: frontend

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ads-pro-platform-config
  labels:
    app: ads-pro-platform
    component: frontend
data:
  NODE_ENV: "production"
  PORT: "8080"
  VITE_LOG_LEVEL: "warn"
  VITE_PERFORMANCE_MONITORING_ENABLED: "true"
  VITE_ANALYTICS_ENABLED: "true"
  VITE_REAL_API_INTEGRATION: "true"
  VITE_ADVANCED_FEATURES: "true"

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ads-pro-platform-pdb
  labels:
    app: ads-pro-platform
    component: frontend
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: ads-pro-platform
      component: frontend

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ads-pro-platform-hpa
  labels:
    app: ads-pro-platform
    component: frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ads-pro-platform
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max