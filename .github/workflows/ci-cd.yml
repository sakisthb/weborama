# CI/CD Pipeline - Option D Implementation
# Comprehensive automation for testing, building, and deploying the Ads Pro Platform

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.x'
  REGISTRY_URL: 'ghcr.io'
  IMAGE_NAME: 'ads-pro-platform'

jobs:
  # ===================================
  # SETUP AND PREPARATION
  # ===================================
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.versions.outputs.node-version }}
      pnpm-version: ${{ steps.versions.outputs.pnpm-version }}
      environment: ${{ steps.environment.outputs.environment }}
      should-deploy: ${{ steps.environment.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set versions
        id: versions
        run: |
          echo "node-version=${{ env.NODE_VERSION }}" >> $GITHUB_OUTPUT
          echo "pnpm-version=${{ env.PNPM_VERSION }}" >> $GITHUB_OUTPUT

      - name: Determine environment
        id: environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # ===================================
  # CODE QUALITY AND LINTING
  # ===================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint:check
        continue-on-error: false

      - name: Run Prettier
        run: pnpm format:check
        continue-on-error: false

      - name: TypeScript type checking
        run: pnpm type-check
        continue-on-error: false

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lint-results
          path: |
            eslint-report.json
            prettier-report.json
          retention-days: 30

  # ===================================
  # AUTOMATED TESTING
  # ===================================
  test:
    name: Automated Testing
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ !github.event.inputs.skip_tests || github.event.inputs.skip_tests == 'false' }}
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "VITE_APP_VERSION=${{ github.sha }}" >> .env.test

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pnpm test:unit --coverage --reporter=json --outputFile=unit-test-results.json
        env:
          CI: true

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          pnpm test:integration --reporter=json --outputFile=integration-test-results.json
        env:
          CI: true

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: |
          pnpm test:e2e --reporter=json --outputFile=e2e-test-results.json
        env:
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            *-test-results.json
            coverage/
          retention-days: 30

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # ===================================
  # SECURITY SCANNING
  # ===================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Run dependency vulnerability scan
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # ===================================
  # BUILD APPLICATION
  # ===================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, lint]
    strategy:
      matrix:
        environment: [development, staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.setup.outputs.pnpm-version }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup environment variables
        run: |
          cp .env.example .env.local
          echo "NODE_ENV=${{ matrix.environment }}" >> .env.local
          echo "VITE_APP_VERSION=${{ github.sha }}" >> .env.local
          echo "VITE_BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> .env.local

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: ${{ matrix.environment }}
          CI: true

      - name: Generate build manifest
        run: |
          echo "{
            \"version\": \"${{ github.sha }}\",
            \"environment\": \"${{ matrix.environment }}\",
            \"buildTime\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"branch\": \"${{ github.ref_name }}\",
            \"commit\": {
              \"sha\": \"${{ github.sha }}\",
              \"message\": \"${{ github.event.head_commit.message }}\",
              \"author\": \"${{ github.event.head_commit.author.name }}\",
              \"timestamp\": \"${{ github.event.head_commit.timestamp }}\"
            },
            \"workflow\": {
              \"runId\": \"${{ github.run_id }}\",
              \"runNumber\": \"${{ github.run_number }}\",
              \"actor\": \"${{ github.actor }}\"
            }
          }" > dist/build-manifest.json

      - name: Analyze bundle size
        run: |
          pnpm analyze-bundle --json > bundle-analysis.json
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.environment }}
          path: |
            dist/
            bundle-analysis.json
          retention-days: 30

  # ===================================
  # DOCKER BUILD AND PUSH
  # ===================================
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [setup, build, test]
    if: needs.setup.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-${{ needs.setup.outputs.environment }}
          path: ./dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.setup.outputs.environment }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ needs.setup.outputs.node-version }}
            BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

  # ===================================
  # PERFORMANCE TESTING
  # ===================================
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-${{ needs.setup.outputs.environment }}
          path: ./dist

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      - name: Install Lighthouse CLI
        run: npm install -g @lhci/cli@0.12.x

      - name: Serve application
        run: |
          npx serve -s dist -l 3000 &
          sleep 10
        
      - name: Run Lighthouse CI
        run: |
          lhci autorun --config=.lighthouserc.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

  # ===================================
  # STAGING DEPLOYMENT
  # ===================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [setup, docker, security]
    if: needs.setup.outputs.environment == 'staging' && needs.setup.outputs.should-deploy == 'true'
    environment:
      name: staging
      url: https://staging-ads-pro-platform.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy to staging
        run: |
          kubectl set image deployment/ads-pro-platform-staging \
            ads-pro-platform=${{ env.REGISTRY_URL }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:staging \
            --namespace=staging
          kubectl rollout status deployment/ads-pro-platform-staging --namespace=staging --timeout=600s

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://staging-ads-pro-platform.com/health || exit 1
          curl -f https://staging-ads-pro-platform.com/api/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment completed successfully! 🚀'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===================================
  # PRODUCTION DEPLOYMENT
  # ===================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup, docker, security, performance]
    if: needs.setup.outputs.environment == 'production' && needs.setup.outputs.should-deploy == 'true'
    environment:
      name: production
      url: https://ads-pro-platform.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Database migration
        run: |
          kubectl create job --from=cronjob/db-migration db-migration-$(date +%s) --namespace=production
          kubectl wait --for=condition=complete job -l job-name=db-migration --timeout=300s --namespace=production

      - name: Blue-Green deployment
        run: |
          # Deploy new version to green environment
          kubectl apply -f k8s/production/green-deployment.yaml
          kubectl rollout status deployment/ads-pro-platform-green --namespace=production --timeout=600s
          
          # Run health checks on green environment
          kubectl wait --for=condition=available deployment/ads-pro-platform-green --timeout=300s --namespace=production
          
          # Switch traffic to green (this would be more sophisticated in a real setup)
          kubectl patch service ads-pro-platform-service --patch '{"spec":{"selector":{"version":"green"}}}' --namespace=production
          
          # Wait for traffic switch to complete
          sleep 30
          
          # Verify production health
          curl -f https://ads-pro-platform.com/health || exit 1
          curl -f https://ads-pro-platform.com/api/health || exit 1
          
          # Scale down blue environment
          kubectl scale deployment ads-pro-platform-blue --replicas=0 --namespace=production

      - name: Update release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            ## 🚀 Production Release v${{ github.run_number }}
            
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref_name }}
            **Author:** ${{ github.event.head_commit.author.name }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
            
            ### Deployment
            - Environment: Production
            - Deployment time: $(date -u +%Y-%m-%dT%H:%M:%SZ)
            - Kubernetes cluster: ${{ secrets.EKS_CLUSTER_NAME }}
            
            ### Links
            - [Production URL](https://ads-pro-platform.com)
            - [Monitoring Dashboard](https://monitoring.ads-pro-platform.com)
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed successfully! 🎉'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===================================
  # POST-DEPLOYMENT MONITORING
  # ===================================
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Setup monitoring
        run: |
          # Configure monitoring alerts
          curl -X POST "${{ secrets.MONITORING_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "event": "deployment_completed",
              "environment": "${{ needs.setup.outputs.environment }}",
              "version": "${{ github.sha }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }'

      - name: Run post-deployment tests
        run: |
          # Wait for application to be fully ready
          sleep 60
          
          # Run comprehensive health checks
          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            URL="https://ads-pro-platform.com"
          else
            URL="https://staging-ads-pro-platform.com"
          fi
          
          # API health check
          curl -f "$URL/api/health" || exit 1
          
          # Database connectivity
          curl -f "$URL/api/db/health" || exit 1
          
          # Performance check
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$URL")
          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "Response time too slow: ${RESPONSE_TIME}s"
            exit 1
          fi

      - name: Update deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Post-deployment monitoring completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}